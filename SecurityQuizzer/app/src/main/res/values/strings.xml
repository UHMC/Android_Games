<resources>
    <string name="app_name">Security Quizzer</string>
    <string name="title_activity_tutorial_entry">TutorialEntryActivity</string>
    <string name="action_settings">Settings</string>
    <string name="section_format">This will be slide %1$d of the study section.</string>
    <string name="title_activity_main_entry">MainEntryActivity</string>
    <string name="title_activity_quiz">QuizActivity</string>
    <string name="title_activity_question1">Question1</string>
    <string name="title_activity_question2">Question2</string>
    <string name="title_activity_question3">Question3</string>
    <string name="title_activity_question4">Question4</string>
    <string name="title_activity_question5">Question5</string>
    <string name="title_activity_results">ResultsActivity</string>
    <string name="Question2_code">REM Hello world\nWINDOWS r\nDELAY 100\nSTRING notepad.exe\nENTER\nDELAY 200\nSTRING Hello world!</string>
    <string name="Question5_code">GUI r\nSTRING cmd\nENTER</string>
    <string name="Tutorial_2">USB Rubber Ducky\'s scripting language makes writing payloads simple. No programming experience is needed.\n\nOutputting \'Hello World\' is as simple as typing STRING Hello World\n\nAdd pauses in between commands with DELAY. Try DELAY 100 for short 100 millisecond pauses or DELAY 1000 for longer 1 second pauses.\n\nYou can combine specials keys: ALT F4, CONTROL ESCAPE, WINDOWS R, SHIFT TAB. They all do exactly as you might expect.\n\nComment your code! Use REM just as you would use // in C++ or Java.\n\nThat\'s it! You just learned Ducky Script.</string>
    <string name="Tutorial_1">We all know about USB; we use it every day. Computers have become so trustworthy of USBs that if you plug in a webcam, the computer will trust that it\'s a webcam. The same principle applies with a keyboard, but what happens if the device "pretends" to be a keyboard? This is the case with Rubber Ducky. The Rubber Ducky is a micro-controller that executes a binary file allowing it to act like a keyboard and type keystrokes at over 1000 words per second. This makes it really handy for compromising a system you have physical access to.\n\nThe Rubber Ducky comes with a set of the following:\n\n• 1x USB to microUSB converter\n• 1x SD to USB adapter\n• 1x Micro-controller\n• 1x SD card\n• 1x Empty USB drive enclosure</string>
    <string name="Tutorial_3">The command list is simple; most of them are just the names of a keystroke:\n\n•REM\n•DEFAULT_DELAY\n•DELAY\n•STRING\n•GUI\n•MENU\n•SHIFT\n•ALT\n•CONTROL\n•LEFTARROW\n•RIGHTARROW\n•DOWNARROW\n•UPARROW\n•BREAK\n•CAPSLOCK\n•DELETE\n•END\n•ESCAPE\n•HOME\n•INSERT\n•NUMLOCK\n•PAGEUP\n•PAGEDOWN\n•PRINTSCREEN\n•SCROLLOCK\n•SPACE\n•TAB</string>
    <string name="Tutorial_4">Deploying the code is quite simple, too.\n\n1) After you finish writing your script, save it as inject.txt\n2) Use a program called Duckencoder to convert your inject.txt into a binary file called inject.bin\n3) Use the SD to USB adapter to move the inject.bin file onto the SD card\n4) Insert the SD card into your Rubber Ducky\n5) Place the Rubber Ducky in the empty enclosure, and insert it into your victim\'s computer\n\nThat\'s it! You have successfully created and deployed a Rubber Ducky payload.</string>
    <string name="Tutorial_title_1">Introduction</string>
    <string name="Tutorial_title_2">DuckyScript</string>
    <string name="Tutorial_title_3">Command list</string>
    <string name="Tutorial_title_4">Deploying the code</string>
</resources>
